Example 1:
Input:
[
    [3, 2, 1, 0, 8, 9],
    [4, 5, 6, -1, 3, 10],
    [6, 8, 9, -1, 5, 3],
    [7, 5, 4, -1, 8, 7],
    [1, 1, 1, -1, 1, 22],
]

Greedy Approach:
Max Happiness: 39
Path: [4, 3, 2, 1, 1, 2]
Time Complexity: O(m * n), m=5, n=6, 0.134 milliseconds
Memory Usage: 0.391 KB

DP Approach:
Max Happiness: 39
Path: [4, 3, 2, 1, 1, 2]
Time Complexity: O(m * n), m=5, n=6, 0.075 milliseconds
Memory Usage: 0.047 KB


----------------------------------------
Example 2:
Input:
[
    [1, 1, 1, -1, 1],
    [2, 2, 2, 0, 2],
    [-1, -1, 6, -1, -1],
    [3, 3, 3, -1, 3],
]

Greedy Approach:
Max Happiness: 14
Path: [4, 4, 3, 2, 2]
Time Complexity: O(m * n), m=4, n=5, 0.055 milliseconds
Memory Usage: 0.062 KB

DP Approach:
Max Happiness: 14
Path: [4, 4, 3, 2, 2]
Time Complexity: O(m * n), m=4, n=5, 0.051 milliseconds
Memory Usage: 0.039 KB


----------------------------------------
Example 3:
Input:
[
    [42, 13, 32, 74],
    [-1, -1, 25, -1],
    [6, 99, 58, 0],
    [-1, -1, -1, 10],
]

Greedy Approach:
Max Happiness: 161
Path: [1, 1, 1, 1]
Time Complexity: O(m * n), m=4, n=4, 0.057 milliseconds
Memory Usage: 0.031 KB

DP Approach:
Max Happiness: 204
Path: [3, 3, 2, 1]
Time Complexity: O(m * n), m=4, n=4, 0.046 milliseconds
Memory Usage: 0.031 KB


----------------------------------------
Example 4:
Input:
[
    [2, 8, -1, 4, 7],
    [-1, 3, 4, -1, 6],
    [7, -1, 8, 9, -1],
    [10, 22, -1, 0, 14],
    [-1, 14, 35, 18, 17],
]

Greedy Approach:
Max Happiness: 102
Path: [4, 4, 5, 5, 5]
Time Complexity: O(m * n), m=5, n=5, 0.054 milliseconds
Memory Usage: 0.062 KB

DP Approach:
Max Happiness: 102
Path: [4, 4, 5, 5, 5]
Time Complexity: O(m * n), m=5, n=5, 0.065 milliseconds
Memory Usage: 0.039 KB


----------------------------------------
Example 5:
Input:
[
    [3, 0, -1, 0, 33],
    [0, 16, 0, 4, 0],
    [6, 0, 9, 0, -1],
    [0, -1, 0, 27, 0],
    [11, 0, 43, 0, 1],
]

Greedy Approach:
Max Happiness: 82
Path: [5, 5, 5, 4, 5]
Time Complexity: O(m * n), m=5, n=5, 0.052 milliseconds
Memory Usage: 0.062 KB

DP Approach:
Max Happiness: 82
Path: [5, 5, 5, 4, 5]
Time Complexity: O(m * n), m=5, n=5, 0.052 milliseconds
Memory Usage: 0.148 KB


----------------------------------------
Example 6:
Input:
[
    [7, 12, 0, 34, 14],
    [6, -1, 45, -1, 90],
    [9, 10, 11, 12, 33],
    [14, -1, 13, -1, 0],
    [27, 73, 19, 20, 21],
]

Greedy Approach:
Max Happiness: 160
Path: [5, 5, 5, 5, 5]
Time Complexity: O(m * n), m=5, n=5, 0.155 milliseconds
Memory Usage: 0.062 KB

DP Approach:
Max Happiness: 215
Path: [5, 5, 4, 3, 2]
Time Complexity: O(m * n), m=5, n=5, 0.065 milliseconds
Memory Usage: 0.148 KB


----------------------------------------
Example 7:
Input:
[
    [7, 12, 0, 4, 4, 1, 1],
    [10, -1, 45, -1, 10, 1, 1],
    [46, -1, 11, 12, 23, 1, 1],
    [140, 20, 2, -1, 0, 1, 1],
    [27, 30, 19, 20, 21, 4, 5],
    [1, 10, 20, 25, 33, 10, 10],
]

Greedy Approach:
Max Happiness: 268
Path: [4, 5, 6, 6, 6, 6, 6]
Time Complexity: O(m * n), m=6, n=7, 0.134 milliseconds
Memory Usage: 0.145 KB

DP Approach:
Max Happiness: 268
Path: [4, 5, 6, 6, 6, 6, 6]
Time Complexity: O(m * n), m=6, n=7, 0.083 milliseconds
Memory Usage: 0.250 KB


----------------------------------------
Example 8:
Input:
[
    [45, 0, 9, 83, 98],
    [57, 0, 26, 96, 0],
    [81, 0, 25, 57, 20],
    [15, -1, 0, 97, 97],
    [98, -1, 18, 28, 71],
]

Greedy Approach:
Max Happiness: 301
Path: [3, 2, 2, 2, 1]
Time Complexity: O(m * n), m=5, n=5, 0.075 milliseconds
Memory Usage: 0.090 KB

DP Approach:
Max Happiness: 301
Path: [3, 3, 2, 2, 1]
Time Complexity: O(m * n), m=5, n=5, 0.065 milliseconds
Memory Usage: 0.125 KB


----------------------------------------
Example 9:
Input:
[
    [-1, 24, 62, 54, 48, 53, 0, 0, 89, 45],
    [-1, 88, 7, 53, 70, 58, -1, -1, 15, 99],
    [0, 77, 92, 63, 87, 49, -1, 0, 66, 8],
    [-1, 84, 100, 60, 95, 38, 0, 0, 42, 73],
    [0, 0, 16, 1, 93, 36, 0, 0, 70, 91],
    [-1, 62, 44, 16, 16, 20, 0, -1, 32, 77],
    [-1, 73, 28, 22, 90, 97, -1, -1, 54, 49],
    [0, 0, 65, 41, 99, 16, -1, 0, 88, 45],
    [-1, 57, 18, 76, 53, 87, -1, -1, 66, 49],
    [-1, 54, 49, 21, 41, 65, 0, -1, 47, 90],
]

Greedy Approach:
Max Happiness: 552
Path: [3, 2, 3, 3, 4, 3, 4, 3, 3, 2]
Time Complexity: O(m * n), m=10, n=10, 0.128 milliseconds
Memory Usage: 0.371 KB

DP Approach:
Max Happiness: 580
Path: [3, 4, 4, 3, 3, 2, 1, 1, 1, 2]
Time Complexity: O(m * n), m=10, n=10, 0.239 milliseconds
Memory Usage: 0.492 KB


----------------------------------------
